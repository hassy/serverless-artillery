#!/usr/bin/env node

'use strict';

const packageJson = require('../package.json');
const slsArt = require('../lib/');
const yargs = require('yargs')
  .help()
  .version(packageJson.version)
  .options({
    D: {
      alias: 'debug',
      description: 'Execute the command in debug mode.  It will be chatty about what it is happening in the code.',
      requiresArg: false,
    },
    V: {
      alias: 'verbose',
      description: 'Execute the command in verbose mode.  It will be chatty about what it is attempting to accomplish.',
      requiresArg: false,
    },
  })
  .global('D', 'V')
  .command('deploy', 'Deploy a default version of the function that will execute your Artillery scripts.', {})
  .command('invoke', 'Invoke your function with your Artillery script.  Will prefer a script given by `-s` over a ' +
    '`script.[yml|json]` in the current directory over the preexisting default script.',
  {
    s: {
      alias: 'script',
      description: 'The Artillery script to execute.',
      requiresArg: true,
      type: 'string',
    },
  })
  .command('remove', 'Remove the function and the associated resources created for or by it.', {})
  .command('script', 'Create a local Artillery script so that you can customize it for your specific load ' +
    'requirements.  See https://artillery.io for documentation.',
  {
    e: {
      alias: 'endpoint',
      description: 'The endpoint to load with traffic.',
      requiresArg: true,
      type: 'string',
    },
    d: {
      alias: 'duration',
      description: 'The duration, in seconds, to load the given endpoint.',
      requiresArg: true,
      type: 'number',
    },
    r: {
      alias: 'rate',
      description: 'The rate, in requests per second, at which to load the given endpoint.',
      requiresArg: true,
      type: 'number',
    },
    t: {
      alias: 'rampTo',
      description: 'The rate to adjust towards away from the given rate, in requests per second at which to load ' +
        'the given endpoint.',
      requiresArg: true,
      type: 'number',
    },
    o: {
      alias: 'out',
      description: 'The file to output the generated script in to.',
      requiresArg: true,
      type: 'string',
    },
  })
  .command('scriptWizard', 'Run the Wizard to generate a test script.')
  .command('configure', 'Create a local copy of the deployment assets for modification and deployment.  See ' +
    'https://docs.serverless.com for documentation.', {})
  .demand(1)
  .strict()
  .argv;

const command = yargs._[0];

if (yargs.debug) {
  console.log(`options were:\n${JSON.stringify(yargs, null, 2)}`);
  console.log(`command that will be executed: slsArt[${command}](${yargs})`);
}

slsArt[command](yargs)
  .catch((ex) => {
    console.log(ex.message);
    if (yargs.verbose) {
      console.log(ex.stack);
    }
  });
